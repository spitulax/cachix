{
  description = "My nix packages";

  nixConfig = {
    extra-substituters = [
      "spitulax.cachix.org"
    ];
    extra-trusted-public-keys = [
      "spitulax.cachix.org-1:GQRdtUgc9vwHTkfukneFHFXLPOo0G/2lj2nRw66ENmU="
    ];
  };

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
  };

  outputs = { self, nixpkgs, ... }:
    let
      inherit (self) outputs;
      inherit (nixpkgs) lib;
      myLib = import ./lib { inherit lib; };

      systems = [ "x86_64-linux" "aarch64-linux" ];
      eachSystem = f: lib.genAttrs systems f;
      foreachSystem = f: lib.genAttrs systems f;

      pkgsFor = foreachSystem (system:
        import nixpkgs {
          inherit system;
          config.allowUnfreePredicate = p:
            builtins.elem (lib.getName p) [
              "osu-lazer"
            ];
        });
      utilsFor = foreachSystem
        (system:
          pkgsFor.${system}.callPackage ./utils { inherit myLib outputs; }
        );

      packagesFor = foreachSystem
        (system:
          import ./pkgs {
            inherit myLib;
            pkgs = pkgsFor.${system};
            utils = utilsFor.${system};
          }
        );
      flakesFor = foreachSystem
        (system:
          import ./flakes {
            inherit myLib;
            pkgs = pkgsFor.${system};
            utils = utilsFor.${system};
          }
        );
    in
    {
      flakes = lib.mapAttrs (_: v: v.flakes) flakesFor;

      packages = eachSystem
        (system:
          let
            pkgs = pkgsFor.${system};
            inherit (packagesFor.${system}) packages;
            inherit (flakesFor.${system}) flakes;
            cachedPackages = myLib.drv.cached packages;
            uncachedPackages = myLib.drv.uncached packages;
          in
          cachedPackages
          // uncachedPackages
          # Only non-excluded packages are regularly cached
          // {
            cached = pkgs.linkFarm "mypkgs-cached" cachedPackages;
            pkgs-update-scripts = packages.update-scripts;
            pkgs-update-scripts-all = packages.update-scripts-all;
            flakes-update-scripts = flakes.update-scripts;
          } // (
            let
              inherit (lib)
                mapAttrsToList
                concatStringsSep
                ;

              yesNo = bool: if bool then "Yes" else "No";

              pkgsList =
                ''
                  | **Name** | **Version** | **Cached** | **Maintained** |
                  | :-: | :-: | :-: | :-: |
                ''
                + concatStringsSep
                  "\n"
                  (mapAttrsToList
                    (k: v:
                      "| **${k}** " +
                      "| ${v.version} " +
                      "| ${yesNo (myLib.drv.isCached v)} " +
                      "| ${yesNo (myLib.drv.isMaintained v)} |"
                    )
                    packages);

              flakesList =
                ''
                  | **Name** | **Rev** | **Maintained** |
                  | :-: | :-: | :-: |
                ''
                + concatStringsSep
                  "\n"
                  (mapAttrsToList
                    (k: v:
                      "| **${k}** " +
                      "| ${v.rev} " +
                      "| ${yesNo (myLib.drv.isMaintained v)} |"
                    )
                    flakes);
            in
            {
              mypkgs-list = pkgs.writeText "mypkgs-list" ''
                <!--- This list was auto-generated. DO NOT edit this file manually. -->

                <h2 align="center">List of Packages and Flakes</h2>

                ## Packages

                ${pkgsList}

                ## Flakes

                ${flakesList}
              '';
            }
          )
        );
    };
}
